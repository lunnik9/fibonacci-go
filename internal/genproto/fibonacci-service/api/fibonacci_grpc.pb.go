// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.3
// source: api/fibonacci.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	FibonacciService_FibonacciStream_FullMethodName = "/api.FibonacciService/FibonacciStream"
	FibonacciService_Fibonacci_FullMethodName       = "/api.FibonacciService/Fibonacci"
)

// FibonacciServiceClient is the client API for FibonacciService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FibonacciServiceClient interface {
	FibonacciStream(ctx context.Context, in *FibonacciStreamRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[FibonacciChunk], error)
	Fibonacci(ctx context.Context, in *FibonacciRequest, opts ...grpc.CallOption) (*FibonacciResponse, error)
}

type fibonacciServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFibonacciServiceClient(cc grpc.ClientConnInterface) FibonacciServiceClient {
	return &fibonacciServiceClient{cc}
}

func (c *fibonacciServiceClient) FibonacciStream(ctx context.Context, in *FibonacciStreamRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[FibonacciChunk], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &FibonacciService_ServiceDesc.Streams[0], FibonacciService_FibonacciStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[FibonacciStreamRequest, FibonacciChunk]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FibonacciService_FibonacciStreamClient = grpc.ServerStreamingClient[FibonacciChunk]

func (c *fibonacciServiceClient) Fibonacci(ctx context.Context, in *FibonacciRequest, opts ...grpc.CallOption) (*FibonacciResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FibonacciResponse)
	err := c.cc.Invoke(ctx, FibonacciService_Fibonacci_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FibonacciServiceServer is the server API for FibonacciService service.
// All implementations must embed UnimplementedFibonacciServiceServer
// for forward compatibility.
type FibonacciServiceServer interface {
	FibonacciStream(*FibonacciStreamRequest, grpc.ServerStreamingServer[FibonacciChunk]) error
	Fibonacci(context.Context, *FibonacciRequest) (*FibonacciResponse, error)
	mustEmbedUnimplementedFibonacciServiceServer()
}

// UnimplementedFibonacciServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedFibonacciServiceServer struct{}

func (UnimplementedFibonacciServiceServer) FibonacciStream(*FibonacciStreamRequest, grpc.ServerStreamingServer[FibonacciChunk]) error {
	return status.Errorf(codes.Unimplemented, "method FibonacciStream not implemented")
}
func (UnimplementedFibonacciServiceServer) Fibonacci(context.Context, *FibonacciRequest) (*FibonacciResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Fibonacci not implemented")
}
func (UnimplementedFibonacciServiceServer) mustEmbedUnimplementedFibonacciServiceServer() {}
func (UnimplementedFibonacciServiceServer) testEmbeddedByValue()                          {}

// UnsafeFibonacciServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FibonacciServiceServer will
// result in compilation errors.
type UnsafeFibonacciServiceServer interface {
	mustEmbedUnimplementedFibonacciServiceServer()
}

func RegisterFibonacciServiceServer(s grpc.ServiceRegistrar, srv FibonacciServiceServer) {
	// If the following call pancis, it indicates UnimplementedFibonacciServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&FibonacciService_ServiceDesc, srv)
}

func _FibonacciService_FibonacciStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FibonacciStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FibonacciServiceServer).FibonacciStream(m, &grpc.GenericServerStream[FibonacciStreamRequest, FibonacciChunk]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FibonacciService_FibonacciStreamServer = grpc.ServerStreamingServer[FibonacciChunk]

func _FibonacciService_Fibonacci_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FibonacciRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FibonacciServiceServer).Fibonacci(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FibonacciService_Fibonacci_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FibonacciServiceServer).Fibonacci(ctx, req.(*FibonacciRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FibonacciService_ServiceDesc is the grpc.ServiceDesc for FibonacciService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FibonacciService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.FibonacciService",
	HandlerType: (*FibonacciServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Fibonacci",
			Handler:    _FibonacciService_Fibonacci_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "FibonacciStream",
			Handler:       _FibonacciService_FibonacciStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/fibonacci.proto",
}
