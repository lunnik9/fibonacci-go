// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v5.27.3
// source: api/fibonacci.proto

package api

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type FibonacciRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	N int32 `protobuf:"varint,1,opt,name=n,proto3" json:"n,omitempty"`
}

func (x *FibonacciRequest) Reset() {
	*x = FibonacciRequest{}
	mi := &file_api_fibonacci_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FibonacciRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FibonacciRequest) ProtoMessage() {}

func (x *FibonacciRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_fibonacci_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FibonacciRequest.ProtoReflect.Descriptor instead.
func (*FibonacciRequest) Descriptor() ([]byte, []int) {
	return file_api_fibonacci_proto_rawDescGZIP(), []int{0}
}

func (x *FibonacciRequest) GetN() int32 {
	if x != nil {
		return x.N
	}
	return 0
}

type FibonacciResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values []string `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *FibonacciResponse) Reset() {
	*x = FibonacciResponse{}
	mi := &file_api_fibonacci_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FibonacciResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FibonacciResponse) ProtoMessage() {}

func (x *FibonacciResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_fibonacci_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FibonacciResponse.ProtoReflect.Descriptor instead.
func (*FibonacciResponse) Descriptor() ([]byte, []int) {
	return file_api_fibonacci_proto_rawDescGZIP(), []int{1}
}

func (x *FibonacciResponse) GetValues() []string {
	if x != nil {
		return x.Values
	}
	return nil
}

type FibonacciStreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	N         int32 `protobuf:"varint,1,opt,name=n,proto3" json:"n,omitempty"`
	ChunkSize int32 `protobuf:"varint,2,opt,name=chunk_size,json=chunkSize,proto3" json:"chunk_size,omitempty"`
}

func (x *FibonacciStreamRequest) Reset() {
	*x = FibonacciStreamRequest{}
	mi := &file_api_fibonacci_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FibonacciStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FibonacciStreamRequest) ProtoMessage() {}

func (x *FibonacciStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_fibonacci_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FibonacciStreamRequest.ProtoReflect.Descriptor instead.
func (*FibonacciStreamRequest) Descriptor() ([]byte, []int) {
	return file_api_fibonacci_proto_rawDescGZIP(), []int{2}
}

func (x *FibonacciStreamRequest) GetN() int32 {
	if x != nil {
		return x.N
	}
	return 0
}

func (x *FibonacciStreamRequest) GetChunkSize() int32 {
	if x != nil {
		return x.ChunkSize
	}
	return 0
}

type FibonacciChunk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index  int32    `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	Values []string `protobuf:"bytes,2,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *FibonacciChunk) Reset() {
	*x = FibonacciChunk{}
	mi := &file_api_fibonacci_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FibonacciChunk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FibonacciChunk) ProtoMessage() {}

func (x *FibonacciChunk) ProtoReflect() protoreflect.Message {
	mi := &file_api_fibonacci_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FibonacciChunk.ProtoReflect.Descriptor instead.
func (*FibonacciChunk) Descriptor() ([]byte, []int) {
	return file_api_fibonacci_proto_rawDescGZIP(), []int{3}
}

func (x *FibonacciChunk) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *FibonacciChunk) GetValues() []string {
	if x != nil {
		return x.Values
	}
	return nil
}

var File_api_fibonacci_proto protoreflect.FileDescriptor

var file_api_fibonacci_proto_rawDesc = []byte{
	0x0a, 0x13, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x62, 0x6f, 0x6e, 0x61, 0x63, 0x63, 0x69, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x03, 0x61, 0x70, 0x69, 0x22, 0x20, 0x0a, 0x10, 0x46, 0x69,
	0x62, 0x6f, 0x6e, 0x61, 0x63, 0x63, 0x69, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0c,
	0x0a, 0x01, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x01, 0x6e, 0x22, 0x2b, 0x0a, 0x11,
	0x46, 0x69, 0x62, 0x6f, 0x6e, 0x61, 0x63, 0x63, 0x69, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x45, 0x0a, 0x16, 0x46, 0x69, 0x62,
	0x6f, 0x6e, 0x61, 0x63, 0x63, 0x69, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x0c, 0x0a, 0x01, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x01,
	0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x53, 0x69, 0x7a, 0x65,
	0x22, 0x3e, 0x0a, 0x0e, 0x46, 0x69, 0x62, 0x6f, 0x6e, 0x61, 0x63, 0x63, 0x69, 0x43, 0x68, 0x75,
	0x6e, 0x6b, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x32, 0x95, 0x01, 0x0a, 0x10, 0x46, 0x69, 0x62, 0x6f, 0x6e, 0x61, 0x63, 0x63, 0x69, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x45, 0x0a, 0x0f, 0x46, 0x69, 0x62, 0x6f, 0x6e, 0x61, 0x63,
	0x63, 0x69, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x1b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x46,
	0x69, 0x62, 0x6f, 0x6e, 0x61, 0x63, 0x63, 0x69, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x46, 0x69, 0x62, 0x6f,
	0x6e, 0x61, 0x63, 0x63, 0x69, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x30, 0x01, 0x12, 0x3a, 0x0a, 0x09,
	0x46, 0x69, 0x62, 0x6f, 0x6e, 0x61, 0x63, 0x63, 0x69, 0x12, 0x15, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x46, 0x69, 0x62, 0x6f, 0x6e, 0x61, 0x63, 0x63, 0x69, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x16, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x46, 0x69, 0x62, 0x6f, 0x6e, 0x61, 0x63, 0x63, 0x69,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x1b, 0x5a, 0x19, 0x66, 0x69, 0x62, 0x6f,
	0x6e, 0x61, 0x63, 0x63, 0x69, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x61, 0x70,
	0x69, 0x3b, 0x61, 0x70, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_fibonacci_proto_rawDescOnce sync.Once
	file_api_fibonacci_proto_rawDescData = file_api_fibonacci_proto_rawDesc
)

func file_api_fibonacci_proto_rawDescGZIP() []byte {
	file_api_fibonacci_proto_rawDescOnce.Do(func() {
		file_api_fibonacci_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_fibonacci_proto_rawDescData)
	})
	return file_api_fibonacci_proto_rawDescData
}

var file_api_fibonacci_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_api_fibonacci_proto_goTypes = []any{
	(*FibonacciRequest)(nil),       // 0: api.FibonacciRequest
	(*FibonacciResponse)(nil),      // 1: api.FibonacciResponse
	(*FibonacciStreamRequest)(nil), // 2: api.FibonacciStreamRequest
	(*FibonacciChunk)(nil),         // 3: api.FibonacciChunk
}
var file_api_fibonacci_proto_depIdxs = []int32{
	2, // 0: api.FibonacciService.FibonacciStream:input_type -> api.FibonacciStreamRequest
	0, // 1: api.FibonacciService.Fibonacci:input_type -> api.FibonacciRequest
	3, // 2: api.FibonacciService.FibonacciStream:output_type -> api.FibonacciChunk
	1, // 3: api.FibonacciService.Fibonacci:output_type -> api.FibonacciResponse
	2, // [2:4] is the sub-list for method output_type
	0, // [0:2] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_api_fibonacci_proto_init() }
func file_api_fibonacci_proto_init() {
	if File_api_fibonacci_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_fibonacci_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_api_fibonacci_proto_goTypes,
		DependencyIndexes: file_api_fibonacci_proto_depIdxs,
		MessageInfos:      file_api_fibonacci_proto_msgTypes,
	}.Build()
	File_api_fibonacci_proto = out.File
	file_api_fibonacci_proto_rawDesc = nil
	file_api_fibonacci_proto_goTypes = nil
	file_api_fibonacci_proto_depIdxs = nil
}
