// Code generated by mockery v2.50.0. DO NOT EDIT.

package mock

import (
	context "context"
	domain "fibonacci/internal/domain"

	mock "github.com/stretchr/testify/mock"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

type Service_Expecter struct {
	mock *mock.Mock
}

func (_m *Service) EXPECT() *Service_Expecter {
	return &Service_Expecter{mock: &_m.Mock}
}

// GetFibonacci provides a mock function with given fields: ctx, n
func (_m *Service) GetFibonacci(ctx context.Context, n int) ([]string, error) {
	ret := _m.Called(ctx, n)

	if len(ret) == 0 {
		panic("no return value specified for GetFibonacci")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) ([]string, error)); ok {
		return rf(ctx, n)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) []string); ok {
		r0 = rf(ctx, n)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, n)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Service_GetFibonacci_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFibonacci'
type Service_GetFibonacci_Call struct {
	*mock.Call
}

// GetFibonacci is a helper method to define mock.On call
//   - ctx context.Context
//   - n int
func (_e *Service_Expecter) GetFibonacci(ctx interface{}, n interface{}) *Service_GetFibonacci_Call {
	return &Service_GetFibonacci_Call{Call: _e.mock.On("GetFibonacci", ctx, n)}
}

func (_c *Service_GetFibonacci_Call) Run(run func(ctx context.Context, n int)) *Service_GetFibonacci_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *Service_GetFibonacci_Call) Return(_a0 []string, _a1 error) *Service_GetFibonacci_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Service_GetFibonacci_Call) RunAndReturn(run func(context.Context, int) ([]string, error)) *Service_GetFibonacci_Call {
	_c.Call.Return(run)
	return _c
}

// GetFibonacciStream provides a mock function with given fields: ctx, req
func (_m *Service) GetFibonacciStream(ctx context.Context, req domain.FibonacciStreamRequest) error {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for GetFibonacciStream")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.FibonacciStreamRequest) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Service_GetFibonacciStream_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFibonacciStream'
type Service_GetFibonacciStream_Call struct {
	*mock.Call
}

// GetFibonacciStream is a helper method to define mock.On call
//   - ctx context.Context
//   - req domain.FibonacciStreamRequest
func (_e *Service_Expecter) GetFibonacciStream(ctx interface{}, req interface{}) *Service_GetFibonacciStream_Call {
	return &Service_GetFibonacciStream_Call{Call: _e.mock.On("GetFibonacciStream", ctx, req)}
}

func (_c *Service_GetFibonacciStream_Call) Run(run func(ctx context.Context, req domain.FibonacciStreamRequest)) *Service_GetFibonacciStream_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.FibonacciStreamRequest))
	})
	return _c
}

func (_c *Service_GetFibonacciStream_Call) Return(_a0 error) *Service_GetFibonacciStream_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Service_GetFibonacciStream_Call) RunAndReturn(run func(context.Context, domain.FibonacciStreamRequest) error) *Service_GetFibonacciStream_Call {
	_c.Call.Return(run)
	return _c
}

// NewService creates a new instance of Service. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewService(t interface {
	mock.TestingT
	Cleanup(func())
}) *Service {
	mock := &Service{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
